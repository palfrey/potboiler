"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//bazel", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "backtrace_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "backtrace-sys",
        "coresymbolication",
        "dbghelp",
        "default",
        "dladdr",
        "libbacktrace",
        "libunwind",
        "std",
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.3.13",
    visibility = ["//visibility:private"],
    deps = [
        "@raze__autocfg__0_1_2//:autocfg",
    ] + selects.with_or({
        # cfg(all(unix, not(target_os = "fuchsia"), not(target_os = "emscripten"), not(target_os = "macos"), not(target_os = "ios")))
        (
          "@rules_rust//rust/platform:i686-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
          "@rules_rust//rust/platform:aarch64-linux-android",
          "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
          "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
          "@rules_rust//rust/platform:i686-linux-android",
          "@rules_rust//rust/platform:i686-unknown-freebsd",
          "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
          "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-linux-android",
          "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@raze__backtrace_sys__0_1_28//:backtrace_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(unix)
        (
          "@rules_rust//rust/platform:i686-apple-darwin",
          "@rules_rust//rust/platform:i686-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-apple-darwin",
          "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
          "@rules_rust//rust/platform:aarch64-apple-darwin",
          "@rules_rust//rust/platform:aarch64-apple-ios",
          "@rules_rust//rust/platform:aarch64-linux-android",
          "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
          "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
          "@rules_rust//rust/platform:i686-linux-android",
          "@rules_rust//rust/platform:i686-unknown-freebsd",
          "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
          "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-apple-ios",
          "@rules_rust//rust/platform:x86_64-linux-android",
          "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(windows)
        (
          "@rules_rust//rust/platform:i686-pc-windows-msvc",
          "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
        ],
        "//conditions:default": [],
    }),
)


# Unsupported target "backtrace" with type "example" omitted

# Unsupported target "raw" with type "example" omitted

rust_library(
    name = "backtrace",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "backtrace-sys",
        "coresymbolication",
        "dbghelp",
        "default",
        "dladdr",
        "libbacktrace",
        "libunwind",
        "std",
    ],
    crate_root = "src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.3.13",
    # buildifier: leave-alone
    deps = [
        ":backtrace_build_script",
        "@raze__cfg_if__0_1_6//:cfg_if",
        "@raze__rustc_demangle__0_1_13//:rustc_demangle",
    ] + selects.with_or({
        # cfg(all(unix, not(target_os = "fuchsia"), not(target_os = "emscripten"), not(target_os = "macos"), not(target_os = "ios")))
        (
          "@rules_rust//rust/platform:i686-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
          "@rules_rust//rust/platform:aarch64-linux-android",
          "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
          "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
          "@rules_rust//rust/platform:i686-linux-android",
          "@rules_rust//rust/platform:i686-unknown-freebsd",
          "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
          "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-linux-android",
          "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@raze__backtrace_sys__0_1_28//:backtrace_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(unix)
        (
          "@rules_rust//rust/platform:i686-apple-darwin",
          "@rules_rust//rust/platform:i686-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-apple-darwin",
          "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
          "@rules_rust//rust/platform:aarch64-apple-darwin",
          "@rules_rust//rust/platform:aarch64-apple-ios",
          "@rules_rust//rust/platform:aarch64-linux-android",
          "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
          "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
          "@rules_rust//rust/platform:i686-linux-android",
          "@rules_rust//rust/platform:i686-unknown-freebsd",
          "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
          "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-apple-ios",
          "@rules_rust//rust/platform:x86_64-linux-android",
          "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(windows)
        (
          "@rules_rust//rust/platform:i686-pc-windows-msvc",
          "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@raze__winapi__0_3_9//:winapi",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "long_fn_name" with type "test" omitted

# Unsupported target "skip_inner_frames" with type "test" omitted

# Unsupported target "smoke" with type "test" omitted
