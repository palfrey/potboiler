"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//bazel", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets

rust_library(
    name = "log4rs",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "all_components",
        "ansi_writer",
        "antidote",
        "chrono",
        "compound_policy",
        "console_appender",
        "console_writer",
        "default",
        "delete_roller",
        "file",
        "file_appender",
        "fixed_window_roller",
        "flate2",
        "gzip",
        "humantime",
        "json_encoder",
        "libc",
        "log-mdc",
        "pattern_encoder",
        "rolling_file_appender",
        "serde",
        "serde-value",
        "serde_derive",
        "serde_json",
        "serde_yaml",
        "simple_writer",
        "size_trigger",
        "thread-id",
        "threshold_filter",
        "typemap",
        "winapi",
        "yaml_format",
    ],
    crate_root = "src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2015",
    proc_macro_deps = [
        "@raze__serde_derive__1_0_88//:serde_derive",
    ],
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.8.1",
    # buildifier: leave-alone
    deps = [
        "@raze__antidote__1_0_0//:antidote",
        "@raze__chrono__0_4_6//:chrono",
        "@raze__crossbeam__0_3_2//:crossbeam",
        "@raze__flate2__1_0_6//:flate2",
        "@raze__fnv__1_0_6//:fnv",
        "@raze__humantime__1_2_0//:humantime",
        "@raze__log__0_4_6//:log",
        "@raze__log_mdc__0_1_0//:log_mdc",
        "@raze__serde__1_0_88//:serde",
        "@raze__serde_json__1_0_38//:serde_json",
        "@raze__serde_value__0_5_3//:serde_value",
        "@raze__serde_yaml__0_8_8//:serde_yaml",
        "@raze__thread_id__3_3_0//:thread_id",
        "@raze__typemap__0_3_3//:typemap",
    ] + selects.with_or({
        # cfg(not(windows))
        (
          "@rules_rust//rust/platform:i686-apple-darwin",
          "@rules_rust//rust/platform:i686-unknown-linux-gnu",
          "@rules_rust//rust/platform:x86_64-apple-darwin",
          "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
          "@rules_rust//rust/platform:aarch64-apple-darwin",
          "@rules_rust//rust/platform:aarch64-apple-ios",
          "@rules_rust//rust/platform:aarch64-linux-android",
          "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
          "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
          "@rules_rust//rust/platform:i686-linux-android",
          "@rules_rust//rust/platform:i686-unknown-freebsd",
          "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
          "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
          "@rules_rust//rust/platform:wasm32-unknown-unknown",
          "@rules_rust//rust/platform:wasm32-wasi",
          "@rules_rust//rust/platform:x86_64-apple-ios",
          "@rules_rust//rust/platform:x86_64-linux-android",
          "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@raze__libc__0_2_48//:libc",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(windows)
        (
          "@rules_rust//rust/platform:i686-pc-windows-msvc",
          "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@raze__winapi__0_3_6//:winapi",
        ],
        "//conditions:default": [],
    }),
)
